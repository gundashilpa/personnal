const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const databasePath = path.join(__dirname, "financeApp.db");

const app = express();
app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    await database.exec(`
      CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT NOT NULL,
        category TEXT NOT NULL,
        amount REAL NOT NULL,
        date TEXT NOT NULL,
        description TEXT
      );
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL
      );
    `);

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();


app.post("/transactions", async (request, response) => {
  const { type, category, amount, date, description } = request.body;
  const postTransactionQuery = `
    INSERT INTO
      transactions (type, category, amount, date, description)
    VALUES
      ('${type}', '${category}', ${amount}, '${date}', '${description}');`;
  await database.run(postTransactionQuery);
  response.send("Transaction Successfully Added");
});


app.get("/transactions", async (request, response) => {
  const getTransactionsQuery = `
    SELECT
      *
    FROM
      transactions;`;
  const transactions = await database.all(getTransactionsQuery);
  response.send(transactions);
});


app.get("/transactions/:id", async (request, response) => {
  const { id } = request.params;
  const getTransactionQuery = `
    SELECT
      *
    FROM
      transactions
    WHERE
      id = ${id};`;
  const transaction = await database.get(getTransactionQuery);
  response.send(transaction);
});


app.put("/transactions/:id", async (request, response) => {
  const { id } = request.params;
  const { type, category, amount, date, description } = request.body;
  const updateTransactionQuery = `
    UPDATE
      transactions
    SET
      type='${type}',
      category='${category}',
      amount=${amount},
      date='${date}',
      description='${description}'
    WHERE
      id = ${id};`;
  await database.run(updateTransactionQuery);
  response.send("Transaction Updated");
});

app.delete("/transactions/:id", async (request, response) => {
  const { id } = request.params;
  const deleteTransactionQuery = `
    DELETE FROM
      transactions
    WHERE
      id = ${id};`;
  await database.run(deleteTransactionQuery);
  response.send("Transaction Deleted");
});


app.get("/summary", async (request, response) => {
  const totalIncomeQuery = `SELECT SUM(amount) AS totalIncome FROM transactions WHERE type='income';`;
  const totalExpenseQuery = `SELECT SUM(amount) AS totalExpenses FROM transactions WHERE type='expense';`;
  const totalIncome = await database.get(totalIncomeQuery);
  const totalExpenses = await database.get(totalExpenseQuery);
  const balance = totalIncome.totalIncome - totalExpenses.totalExpenses;

  response.send({
    totalIncome: totalIncome.totalIncome || 0,
    totalExpenses: totalExpenses.totalExpenses || 0,
    balance: balance || 0,
  });
});

module.exports = app;
